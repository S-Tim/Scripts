#!/usr/bin/env python3

import sys, os, re
from subprocess import check_output, CalledProcessError, DEVNULL

def main():
    FEATURE_PREFIX = "feature/"
    ID_PATTERN = "ISSUE-\\d+"

    commit_msg_file, commit_type, _ = collect_parameters()

    branch = get_branch_name()
    if branch is None:
        log("Could not retrieve branch name. Probably rebasing right now.")
        exit()

    log(f"On branch {branch}")

    if branch.startswith(FEATURE_PREFIX) and (commit_type == "" or commit_type == "message"):
        log("Oh hey, it's a feature branch and a regular commit")

        issue_id = get_issue_id(ID_PATTERN, branch)
        if issue_id is None:
            log("Could not extract an issue ID")
            exit()

        log(f"Extracted issue ID: {issue_id}")

        prepend_commit_message(issue_id, commit_msg_file)
    else:
        log("Nothing to do here")


def collect_parameters():
    # See https://git-scm.com/docs/githooks#_prepare_commit_msg for reference
    commit_msg_file = sys.argv[1]

    if len(sys.argv) > 2:
        commit_type = sys.argv[2]
    else:
        commit_type = ""

    if len(sys.argv) > 3:
        commit_hash = sys.argv[3]
    else:
        commit_hash = ""

    return commit_msg_file, commit_type, commit_hash


def get_branch_name():
    try:
        return check_output(["git", "symbolic-ref", "--short", "HEAD"], stderr=DEVNULL).decode("utf-8").strip()
    except CalledProcessError:
        return None


def get_issue_id(pattern, branch):
    match = re.search(pattern, branch)
    if match:
        return match.group(0)
    else:
        return None


def prepend_commit_message(issue_id, commit_msg_file):
    with open(commit_msg_file, "r+") as f:
        content = f.read()
        f.seek(0, 0)
        f.write(f"[{issue_id}] {content}")


def log(message):
    print(f"prepare-commit-msg: {message}")


main()
